// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

enum Role {
  ADMIN
  SELLER
  CUSTOMER
}

model User {
  id String @id @unique @default(uuid())

  name            String
  email           String  @unique
  phoneNumber     String?
  profileImageUrl String
  type            Role    @default(CUSTOMER)

  password String?

  //for sheller
  isApproved Boolean @default(false)

  //relation
  address       Address[]
  product       Product[]
  orders        Order[]
  reviews       Review[]
  transactions  Transaction[]
  sellerPayouts SellerPayout[]
  wishlistItems Wishlist[]
  isDeleted     Boolean        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id     String @id @unique @default(uuid())
  userId String

  country  String
  state    String
  city     String
  street   String?
  pincode  Int
  landMark String

  //relation
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}

enum ProductCategory {
  MOBILE
  LAPTOP
  TABLET
  ACCESSORIES
  AUDIO
  CAMERA
}

model Product {
  id                 String          @id @unique @default(uuid())
  name               String
  description        String
  price              Int
  stock              Int
  displayImage       String
  discountPercentage Int             @default(0)
  isActiveDiscount   Boolean         @default(false)
  isVisible          Boolean         @default(true)
  category           ProductCategory
  isDeleted          Boolean         @default(false)
  //relaton to the seller one seller can create multiple product
  sellerId           String
  seller             User            @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  //reloation to iamge model
  images ProductImage[]

  //relation to order item
  orderItems OrderItem[]

  //relation to the review
  reviews Review[]

  //relation to wishlist
  wishlistedBy Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//product images
model ProductImage {
  id              String  @id @unique @default(uuid())
  productImageUrl String
  fileId          String? //for imagekit operation

  //relationto product
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id String @id @unique @default(uuid())

  totalAmount Float
  status      OrderStatus @default(PENDING)
  isDeleted   Boolean     @default(false)
  //relation in between order and the orderItem
  items       OrderItem[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  addressId String
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  transaction Transaction?

  createdAt DateTime @default(now())
}

model OrderItem {
  id           String @id @unique @default(uuid())
  orderId      String
  productId    String
  quantity     Int
  productPrice Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id      String  @id @unique @default(uuid())
  rating  Int     @default(1)
  comment String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  INITIATED
  SUCCESS
  FAILED
  REFUNDED
  CANCELLED
  PENDING
}

enum PaymentMethod {
  CARD
  UPI
  WALLET
  NETBANKING
  CASH_ON_DELIVERY
  PAY_LATER
}

model Transaction {
  id         String        @id @unique @default(uuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  orderId    String        @unique
  order      Order         @relation(fields: [orderId], references: [id])
  amount     Float
  method     PaymentMethod
  status     PaymentStatus
  paymentRef String?
  isDeleted  Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellerPayout {
  id        String   @id @default(uuid())
  sellerId  String
  seller    User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  amount    Float
  paidAt    DateTime @default(now())
  reference String?
  isDeleted Boolean  @default(false)
}

model Wishlist {
  id String @id @default(uuid())

  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, productId]) // prevent duplicates in wishlist
}
